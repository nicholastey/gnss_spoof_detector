// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_synchro.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gnss_5fsynchro_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gnss_5fsynchro_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gnss_5fsynchro_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gnss_5fsynchro_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnss_5fsynchro_2eproto;
namespace gnss_sdr {
class GnssSynchro;
struct GnssSynchroDefaultTypeInternal;
extern GnssSynchroDefaultTypeInternal _GnssSynchro_default_instance_;
class Observables;
struct ObservablesDefaultTypeInternal;
extern ObservablesDefaultTypeInternal _Observables_default_instance_;
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> ::gnss_sdr::GnssSynchro* Arena::CreateMaybeMessage<::gnss_sdr::GnssSynchro>(Arena*);
template<> ::gnss_sdr::Observables* Arena::CreateMaybeMessage<::gnss_sdr::Observables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gnss_sdr {

// ===================================================================

class GnssSynchro final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.GnssSynchro) */ {
 public:
  inline GnssSynchro() : GnssSynchro(nullptr) {}
  ~GnssSynchro() override;
  explicit PROTOBUF_CONSTEXPR GnssSynchro(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GnssSynchro(const GnssSynchro& from);
  GnssSynchro(GnssSynchro&& from) noexcept
    : GnssSynchro() {
    *this = ::std::move(from);
  }

  inline GnssSynchro& operator=(const GnssSynchro& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssSynchro& operator=(GnssSynchro&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GnssSynchro& default_instance() {
    return *internal_default_instance();
  }
  static inline const GnssSynchro* internal_default_instance() {
    return reinterpret_cast<const GnssSynchro*>(
               &_GnssSynchro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GnssSynchro& a, GnssSynchro& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssSynchro* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssSynchro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GnssSynchro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GnssSynchro>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GnssSynchro& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GnssSynchro& from) {
    GnssSynchro::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssSynchro* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnss_sdr.GnssSynchro";
  }
  protected:
  explicit GnssSynchro(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemFieldNumber = 1,
    kSignalFieldNumber = 2,
    kPrnFieldNumber = 3,
    kChannelIdFieldNumber = 4,
    kAcqDelaySamplesFieldNumber = 5,
    kAcqDopplerHzFieldNumber = 6,
    kAcqSamplestampSamplesFieldNumber = 7,
    kFsFieldNumber = 10,
    kPromptIFieldNumber = 11,
    kPromptQFieldNumber = 12,
    kCn0DbHzFieldNumber = 13,
    kCarrierDopplerHzFieldNumber = 14,
    kCarrierPhaseRadsFieldNumber = 15,
    kAcqDopplerStepFieldNumber = 8,
    kFlagValidAcquisitionFieldNumber = 9,
    kFlagValidSymbolOutputFieldNumber = 18,
    kFlagValidWordFieldNumber = 20,
    kFlagValidPseudorangeFieldNumber = 24,
    kCodePhaseSamplesFieldNumber = 16,
    kTrackingSampleCounterFieldNumber = 17,
    kCorrelationLengthMsFieldNumber = 19,
    kTowAtCurrentSymbolMsFieldNumber = 21,
    kPseudorangeMFieldNumber = 22,
    kRxTimeFieldNumber = 23,
    kInterpTowMsFieldNumber = 25,
    kFlagPLL180DegPhaseLockedFieldNumber = 26,
  };
  // string system = 1;
  void clear_system();
  const std::string& system() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_system(ArgT0&& arg0, ArgT... args);
  std::string* mutable_system();
  PROTOBUF_NODISCARD std::string* release_system();
  void set_allocated_system(std::string* system);
  private:
  const std::string& _internal_system() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // string signal = 2;
  void clear_signal();
  const std::string& signal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signal();
  PROTOBUF_NODISCARD std::string* release_signal();
  void set_allocated_signal(std::string* signal);
  private:
  const std::string& _internal_signal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signal(const std::string& value);
  std::string* _internal_mutable_signal();
  public:

  // uint32 prn = 3;
  void clear_prn();
  uint32_t prn() const;
  void set_prn(uint32_t value);
  private:
  uint32_t _internal_prn() const;
  void _internal_set_prn(uint32_t value);
  public:

  // int32 channel_id = 4;
  void clear_channel_id();
  int32_t channel_id() const;
  void set_channel_id(int32_t value);
  private:
  int32_t _internal_channel_id() const;
  void _internal_set_channel_id(int32_t value);
  public:

  // double acq_delay_samples = 5;
  void clear_acq_delay_samples();
  double acq_delay_samples() const;
  void set_acq_delay_samples(double value);
  private:
  double _internal_acq_delay_samples() const;
  void _internal_set_acq_delay_samples(double value);
  public:

  // double acq_doppler_hz = 6;
  void clear_acq_doppler_hz();
  double acq_doppler_hz() const;
  void set_acq_doppler_hz(double value);
  private:
  double _internal_acq_doppler_hz() const;
  void _internal_set_acq_doppler_hz(double value);
  public:

  // uint64 acq_samplestamp_samples = 7;
  void clear_acq_samplestamp_samples();
  uint64_t acq_samplestamp_samples() const;
  void set_acq_samplestamp_samples(uint64_t value);
  private:
  uint64_t _internal_acq_samplestamp_samples() const;
  void _internal_set_acq_samplestamp_samples(uint64_t value);
  public:

  // int64 fs = 10;
  void clear_fs();
  int64_t fs() const;
  void set_fs(int64_t value);
  private:
  int64_t _internal_fs() const;
  void _internal_set_fs(int64_t value);
  public:

  // double prompt_i = 11;
  void clear_prompt_i();
  double prompt_i() const;
  void set_prompt_i(double value);
  private:
  double _internal_prompt_i() const;
  void _internal_set_prompt_i(double value);
  public:

  // double prompt_q = 12;
  void clear_prompt_q();
  double prompt_q() const;
  void set_prompt_q(double value);
  private:
  double _internal_prompt_q() const;
  void _internal_set_prompt_q(double value);
  public:

  // double cn0_db_hz = 13;
  void clear_cn0_db_hz();
  double cn0_db_hz() const;
  void set_cn0_db_hz(double value);
  private:
  double _internal_cn0_db_hz() const;
  void _internal_set_cn0_db_hz(double value);
  public:

  // double carrier_doppler_hz = 14;
  void clear_carrier_doppler_hz();
  double carrier_doppler_hz() const;
  void set_carrier_doppler_hz(double value);
  private:
  double _internal_carrier_doppler_hz() const;
  void _internal_set_carrier_doppler_hz(double value);
  public:

  // double carrier_phase_rads = 15;
  void clear_carrier_phase_rads();
  double carrier_phase_rads() const;
  void set_carrier_phase_rads(double value);
  private:
  double _internal_carrier_phase_rads() const;
  void _internal_set_carrier_phase_rads(double value);
  public:

  // uint32 acq_doppler_step = 8;
  void clear_acq_doppler_step();
  uint32_t acq_doppler_step() const;
  void set_acq_doppler_step(uint32_t value);
  private:
  uint32_t _internal_acq_doppler_step() const;
  void _internal_set_acq_doppler_step(uint32_t value);
  public:

  // bool flag_valid_acquisition = 9;
  void clear_flag_valid_acquisition();
  bool flag_valid_acquisition() const;
  void set_flag_valid_acquisition(bool value);
  private:
  bool _internal_flag_valid_acquisition() const;
  void _internal_set_flag_valid_acquisition(bool value);
  public:

  // bool flag_valid_symbol_output = 18;
  void clear_flag_valid_symbol_output();
  bool flag_valid_symbol_output() const;
  void set_flag_valid_symbol_output(bool value);
  private:
  bool _internal_flag_valid_symbol_output() const;
  void _internal_set_flag_valid_symbol_output(bool value);
  public:

  // bool flag_valid_word = 20;
  void clear_flag_valid_word();
  bool flag_valid_word() const;
  void set_flag_valid_word(bool value);
  private:
  bool _internal_flag_valid_word() const;
  void _internal_set_flag_valid_word(bool value);
  public:

  // bool flag_valid_pseudorange = 24;
  void clear_flag_valid_pseudorange();
  bool flag_valid_pseudorange() const;
  void set_flag_valid_pseudorange(bool value);
  private:
  bool _internal_flag_valid_pseudorange() const;
  void _internal_set_flag_valid_pseudorange(bool value);
  public:

  // double code_phase_samples = 16;
  void clear_code_phase_samples();
  double code_phase_samples() const;
  void set_code_phase_samples(double value);
  private:
  double _internal_code_phase_samples() const;
  void _internal_set_code_phase_samples(double value);
  public:

  // uint64 tracking_sample_counter = 17;
  void clear_tracking_sample_counter();
  uint64_t tracking_sample_counter() const;
  void set_tracking_sample_counter(uint64_t value);
  private:
  uint64_t _internal_tracking_sample_counter() const;
  void _internal_set_tracking_sample_counter(uint64_t value);
  public:

  // int32 correlation_length_ms = 19;
  void clear_correlation_length_ms();
  int32_t correlation_length_ms() const;
  void set_correlation_length_ms(int32_t value);
  private:
  int32_t _internal_correlation_length_ms() const;
  void _internal_set_correlation_length_ms(int32_t value);
  public:

  // uint32 tow_at_current_symbol_ms = 21;
  void clear_tow_at_current_symbol_ms();
  uint32_t tow_at_current_symbol_ms() const;
  void set_tow_at_current_symbol_ms(uint32_t value);
  private:
  uint32_t _internal_tow_at_current_symbol_ms() const;
  void _internal_set_tow_at_current_symbol_ms(uint32_t value);
  public:

  // double pseudorange_m = 22;
  void clear_pseudorange_m();
  double pseudorange_m() const;
  void set_pseudorange_m(double value);
  private:
  double _internal_pseudorange_m() const;
  void _internal_set_pseudorange_m(double value);
  public:

  // double rx_time = 23;
  void clear_rx_time();
  double rx_time() const;
  void set_rx_time(double value);
  private:
  double _internal_rx_time() const;
  void _internal_set_rx_time(double value);
  public:

  // double interp_tow_ms = 25;
  void clear_interp_tow_ms();
  double interp_tow_ms() const;
  void set_interp_tow_ms(double value);
  private:
  double _internal_interp_tow_ms() const;
  void _internal_set_interp_tow_ms(double value);
  public:

  // bool flag_PLL_180_deg_phase_locked = 26;
  void clear_flag_pll_180_deg_phase_locked();
  bool flag_pll_180_deg_phase_locked() const;
  void set_flag_pll_180_deg_phase_locked(bool value);
  private:
  bool _internal_flag_pll_180_deg_phase_locked() const;
  void _internal_set_flag_pll_180_deg_phase_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gnss_sdr.GnssSynchro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_;
    uint32_t prn_;
    int32_t channel_id_;
    double acq_delay_samples_;
    double acq_doppler_hz_;
    uint64_t acq_samplestamp_samples_;
    int64_t fs_;
    double prompt_i_;
    double prompt_q_;
    double cn0_db_hz_;
    double carrier_doppler_hz_;
    double carrier_phase_rads_;
    uint32_t acq_doppler_step_;
    bool flag_valid_acquisition_;
    bool flag_valid_symbol_output_;
    bool flag_valid_word_;
    bool flag_valid_pseudorange_;
    double code_phase_samples_;
    uint64_t tracking_sample_counter_;
    int32_t correlation_length_ms_;
    uint32_t tow_at_current_symbol_ms_;
    double pseudorange_m_;
    double rx_time_;
    double interp_tow_ms_;
    bool flag_pll_180_deg_phase_locked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gnss_5fsynchro_2eproto;
};
// -------------------------------------------------------------------

class Observables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnss_sdr.Observables) */ {
 public:
  inline Observables() : Observables(nullptr) {}
  ~Observables() override;
  explicit PROTOBUF_CONSTEXPR Observables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Observables(const Observables& from);
  Observables(Observables&& from) noexcept
    : Observables() {
    *this = ::std::move(from);
  }

  inline Observables& operator=(const Observables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Observables& operator=(Observables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Observables& default_instance() {
    return *internal_default_instance();
  }
  static inline const Observables* internal_default_instance() {
    return reinterpret_cast<const Observables*>(
               &_Observables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Observables& a, Observables& b) {
    a.Swap(&b);
  }
  inline void Swap(Observables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Observables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Observables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Observables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Observables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Observables& from) {
    Observables::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnss_sdr.Observables";
  }
  protected:
  explicit Observables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObservableFieldNumber = 1,
  };
  // repeated .gnss_sdr.GnssSynchro observable = 1;
  int observable_size() const;
  private:
  int _internal_observable_size() const;
  public:
  void clear_observable();
  ::gnss_sdr::GnssSynchro* mutable_observable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnss_sdr::GnssSynchro >*
      mutable_observable();
  private:
  const ::gnss_sdr::GnssSynchro& _internal_observable(int index) const;
  ::gnss_sdr::GnssSynchro* _internal_add_observable();
  public:
  const ::gnss_sdr::GnssSynchro& observable(int index) const;
  ::gnss_sdr::GnssSynchro* add_observable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnss_sdr::GnssSynchro >&
      observable() const;

  // @@protoc_insertion_point(class_scope:gnss_sdr.Observables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnss_sdr::GnssSynchro > observable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gnss_5fsynchro_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GnssSynchro

// string system = 1;
inline void GnssSynchro::clear_system() {
  _impl_.system_.ClearToEmpty();
}
inline const std::string& GnssSynchro::system() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.system)
  return _internal_system();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GnssSynchro::set_system(ArgT0&& arg0, ArgT... args) {
 
 _impl_.system_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.system)
}
inline std::string* GnssSynchro::mutable_system() {
  std::string* _s = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:gnss_sdr.GnssSynchro.system)
  return _s;
}
inline const std::string& GnssSynchro::_internal_system() const {
  return _impl_.system_.Get();
}
inline void GnssSynchro::_internal_set_system(const std::string& value) {
  
  _impl_.system_.Set(value, GetArenaForAllocation());
}
inline std::string* GnssSynchro::_internal_mutable_system() {
  
  return _impl_.system_.Mutable(GetArenaForAllocation());
}
inline std::string* GnssSynchro::release_system() {
  // @@protoc_insertion_point(field_release:gnss_sdr.GnssSynchro.system)
  return _impl_.system_.Release();
}
inline void GnssSynchro::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  _impl_.system_.SetAllocated(system, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.system_.IsDefault()) {
    _impl_.system_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.GnssSynchro.system)
}

// string signal = 2;
inline void GnssSynchro::clear_signal() {
  _impl_.signal_.ClearToEmpty();
}
inline const std::string& GnssSynchro::signal() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.signal)
  return _internal_signal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GnssSynchro::set_signal(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.signal)
}
inline std::string* GnssSynchro::mutable_signal() {
  std::string* _s = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:gnss_sdr.GnssSynchro.signal)
  return _s;
}
inline const std::string& GnssSynchro::_internal_signal() const {
  return _impl_.signal_.Get();
}
inline void GnssSynchro::_internal_set_signal(const std::string& value) {
  
  _impl_.signal_.Set(value, GetArenaForAllocation());
}
inline std::string* GnssSynchro::_internal_mutable_signal() {
  
  return _impl_.signal_.Mutable(GetArenaForAllocation());
}
inline std::string* GnssSynchro::release_signal() {
  // @@protoc_insertion_point(field_release:gnss_sdr.GnssSynchro.signal)
  return _impl_.signal_.Release();
}
inline void GnssSynchro::set_allocated_signal(std::string* signal) {
  if (signal != nullptr) {
    
  } else {
    
  }
  _impl_.signal_.SetAllocated(signal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signal_.IsDefault()) {
    _impl_.signal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnss_sdr.GnssSynchro.signal)
}

// uint32 prn = 3;
inline void GnssSynchro::clear_prn() {
  _impl_.prn_ = 0u;
}
inline uint32_t GnssSynchro::_internal_prn() const {
  return _impl_.prn_;
}
inline uint32_t GnssSynchro::prn() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.prn)
  return _internal_prn();
}
inline void GnssSynchro::_internal_set_prn(uint32_t value) {
  
  _impl_.prn_ = value;
}
inline void GnssSynchro::set_prn(uint32_t value) {
  _internal_set_prn(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.prn)
}

// int32 channel_id = 4;
inline void GnssSynchro::clear_channel_id() {
  _impl_.channel_id_ = 0;
}
inline int32_t GnssSynchro::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline int32_t GnssSynchro::channel_id() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.channel_id)
  return _internal_channel_id();
}
inline void GnssSynchro::_internal_set_channel_id(int32_t value) {
  
  _impl_.channel_id_ = value;
}
inline void GnssSynchro::set_channel_id(int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.channel_id)
}

// double acq_delay_samples = 5;
inline void GnssSynchro::clear_acq_delay_samples() {
  _impl_.acq_delay_samples_ = 0;
}
inline double GnssSynchro::_internal_acq_delay_samples() const {
  return _impl_.acq_delay_samples_;
}
inline double GnssSynchro::acq_delay_samples() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.acq_delay_samples)
  return _internal_acq_delay_samples();
}
inline void GnssSynchro::_internal_set_acq_delay_samples(double value) {
  
  _impl_.acq_delay_samples_ = value;
}
inline void GnssSynchro::set_acq_delay_samples(double value) {
  _internal_set_acq_delay_samples(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.acq_delay_samples)
}

// double acq_doppler_hz = 6;
inline void GnssSynchro::clear_acq_doppler_hz() {
  _impl_.acq_doppler_hz_ = 0;
}
inline double GnssSynchro::_internal_acq_doppler_hz() const {
  return _impl_.acq_doppler_hz_;
}
inline double GnssSynchro::acq_doppler_hz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.acq_doppler_hz)
  return _internal_acq_doppler_hz();
}
inline void GnssSynchro::_internal_set_acq_doppler_hz(double value) {
  
  _impl_.acq_doppler_hz_ = value;
}
inline void GnssSynchro::set_acq_doppler_hz(double value) {
  _internal_set_acq_doppler_hz(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.acq_doppler_hz)
}

// uint64 acq_samplestamp_samples = 7;
inline void GnssSynchro::clear_acq_samplestamp_samples() {
  _impl_.acq_samplestamp_samples_ = uint64_t{0u};
}
inline uint64_t GnssSynchro::_internal_acq_samplestamp_samples() const {
  return _impl_.acq_samplestamp_samples_;
}
inline uint64_t GnssSynchro::acq_samplestamp_samples() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.acq_samplestamp_samples)
  return _internal_acq_samplestamp_samples();
}
inline void GnssSynchro::_internal_set_acq_samplestamp_samples(uint64_t value) {
  
  _impl_.acq_samplestamp_samples_ = value;
}
inline void GnssSynchro::set_acq_samplestamp_samples(uint64_t value) {
  _internal_set_acq_samplestamp_samples(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.acq_samplestamp_samples)
}

// uint32 acq_doppler_step = 8;
inline void GnssSynchro::clear_acq_doppler_step() {
  _impl_.acq_doppler_step_ = 0u;
}
inline uint32_t GnssSynchro::_internal_acq_doppler_step() const {
  return _impl_.acq_doppler_step_;
}
inline uint32_t GnssSynchro::acq_doppler_step() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.acq_doppler_step)
  return _internal_acq_doppler_step();
}
inline void GnssSynchro::_internal_set_acq_doppler_step(uint32_t value) {
  
  _impl_.acq_doppler_step_ = value;
}
inline void GnssSynchro::set_acq_doppler_step(uint32_t value) {
  _internal_set_acq_doppler_step(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.acq_doppler_step)
}

// bool flag_valid_acquisition = 9;
inline void GnssSynchro::clear_flag_valid_acquisition() {
  _impl_.flag_valid_acquisition_ = false;
}
inline bool GnssSynchro::_internal_flag_valid_acquisition() const {
  return _impl_.flag_valid_acquisition_;
}
inline bool GnssSynchro::flag_valid_acquisition() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.flag_valid_acquisition)
  return _internal_flag_valid_acquisition();
}
inline void GnssSynchro::_internal_set_flag_valid_acquisition(bool value) {
  
  _impl_.flag_valid_acquisition_ = value;
}
inline void GnssSynchro::set_flag_valid_acquisition(bool value) {
  _internal_set_flag_valid_acquisition(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.flag_valid_acquisition)
}

// int64 fs = 10;
inline void GnssSynchro::clear_fs() {
  _impl_.fs_ = int64_t{0};
}
inline int64_t GnssSynchro::_internal_fs() const {
  return _impl_.fs_;
}
inline int64_t GnssSynchro::fs() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.fs)
  return _internal_fs();
}
inline void GnssSynchro::_internal_set_fs(int64_t value) {
  
  _impl_.fs_ = value;
}
inline void GnssSynchro::set_fs(int64_t value) {
  _internal_set_fs(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.fs)
}

// double prompt_i = 11;
inline void GnssSynchro::clear_prompt_i() {
  _impl_.prompt_i_ = 0;
}
inline double GnssSynchro::_internal_prompt_i() const {
  return _impl_.prompt_i_;
}
inline double GnssSynchro::prompt_i() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.prompt_i)
  return _internal_prompt_i();
}
inline void GnssSynchro::_internal_set_prompt_i(double value) {
  
  _impl_.prompt_i_ = value;
}
inline void GnssSynchro::set_prompt_i(double value) {
  _internal_set_prompt_i(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.prompt_i)
}

// double prompt_q = 12;
inline void GnssSynchro::clear_prompt_q() {
  _impl_.prompt_q_ = 0;
}
inline double GnssSynchro::_internal_prompt_q() const {
  return _impl_.prompt_q_;
}
inline double GnssSynchro::prompt_q() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.prompt_q)
  return _internal_prompt_q();
}
inline void GnssSynchro::_internal_set_prompt_q(double value) {
  
  _impl_.prompt_q_ = value;
}
inline void GnssSynchro::set_prompt_q(double value) {
  _internal_set_prompt_q(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.prompt_q)
}

// double cn0_db_hz = 13;
inline void GnssSynchro::clear_cn0_db_hz() {
  _impl_.cn0_db_hz_ = 0;
}
inline double GnssSynchro::_internal_cn0_db_hz() const {
  return _impl_.cn0_db_hz_;
}
inline double GnssSynchro::cn0_db_hz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.cn0_db_hz)
  return _internal_cn0_db_hz();
}
inline void GnssSynchro::_internal_set_cn0_db_hz(double value) {
  
  _impl_.cn0_db_hz_ = value;
}
inline void GnssSynchro::set_cn0_db_hz(double value) {
  _internal_set_cn0_db_hz(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.cn0_db_hz)
}

// double carrier_doppler_hz = 14;
inline void GnssSynchro::clear_carrier_doppler_hz() {
  _impl_.carrier_doppler_hz_ = 0;
}
inline double GnssSynchro::_internal_carrier_doppler_hz() const {
  return _impl_.carrier_doppler_hz_;
}
inline double GnssSynchro::carrier_doppler_hz() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.carrier_doppler_hz)
  return _internal_carrier_doppler_hz();
}
inline void GnssSynchro::_internal_set_carrier_doppler_hz(double value) {
  
  _impl_.carrier_doppler_hz_ = value;
}
inline void GnssSynchro::set_carrier_doppler_hz(double value) {
  _internal_set_carrier_doppler_hz(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.carrier_doppler_hz)
}

// double carrier_phase_rads = 15;
inline void GnssSynchro::clear_carrier_phase_rads() {
  _impl_.carrier_phase_rads_ = 0;
}
inline double GnssSynchro::_internal_carrier_phase_rads() const {
  return _impl_.carrier_phase_rads_;
}
inline double GnssSynchro::carrier_phase_rads() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.carrier_phase_rads)
  return _internal_carrier_phase_rads();
}
inline void GnssSynchro::_internal_set_carrier_phase_rads(double value) {
  
  _impl_.carrier_phase_rads_ = value;
}
inline void GnssSynchro::set_carrier_phase_rads(double value) {
  _internal_set_carrier_phase_rads(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.carrier_phase_rads)
}

// double code_phase_samples = 16;
inline void GnssSynchro::clear_code_phase_samples() {
  _impl_.code_phase_samples_ = 0;
}
inline double GnssSynchro::_internal_code_phase_samples() const {
  return _impl_.code_phase_samples_;
}
inline double GnssSynchro::code_phase_samples() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.code_phase_samples)
  return _internal_code_phase_samples();
}
inline void GnssSynchro::_internal_set_code_phase_samples(double value) {
  
  _impl_.code_phase_samples_ = value;
}
inline void GnssSynchro::set_code_phase_samples(double value) {
  _internal_set_code_phase_samples(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.code_phase_samples)
}

// uint64 tracking_sample_counter = 17;
inline void GnssSynchro::clear_tracking_sample_counter() {
  _impl_.tracking_sample_counter_ = uint64_t{0u};
}
inline uint64_t GnssSynchro::_internal_tracking_sample_counter() const {
  return _impl_.tracking_sample_counter_;
}
inline uint64_t GnssSynchro::tracking_sample_counter() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.tracking_sample_counter)
  return _internal_tracking_sample_counter();
}
inline void GnssSynchro::_internal_set_tracking_sample_counter(uint64_t value) {
  
  _impl_.tracking_sample_counter_ = value;
}
inline void GnssSynchro::set_tracking_sample_counter(uint64_t value) {
  _internal_set_tracking_sample_counter(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.tracking_sample_counter)
}

// bool flag_valid_symbol_output = 18;
inline void GnssSynchro::clear_flag_valid_symbol_output() {
  _impl_.flag_valid_symbol_output_ = false;
}
inline bool GnssSynchro::_internal_flag_valid_symbol_output() const {
  return _impl_.flag_valid_symbol_output_;
}
inline bool GnssSynchro::flag_valid_symbol_output() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.flag_valid_symbol_output)
  return _internal_flag_valid_symbol_output();
}
inline void GnssSynchro::_internal_set_flag_valid_symbol_output(bool value) {
  
  _impl_.flag_valid_symbol_output_ = value;
}
inline void GnssSynchro::set_flag_valid_symbol_output(bool value) {
  _internal_set_flag_valid_symbol_output(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.flag_valid_symbol_output)
}

// int32 correlation_length_ms = 19;
inline void GnssSynchro::clear_correlation_length_ms() {
  _impl_.correlation_length_ms_ = 0;
}
inline int32_t GnssSynchro::_internal_correlation_length_ms() const {
  return _impl_.correlation_length_ms_;
}
inline int32_t GnssSynchro::correlation_length_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.correlation_length_ms)
  return _internal_correlation_length_ms();
}
inline void GnssSynchro::_internal_set_correlation_length_ms(int32_t value) {
  
  _impl_.correlation_length_ms_ = value;
}
inline void GnssSynchro::set_correlation_length_ms(int32_t value) {
  _internal_set_correlation_length_ms(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.correlation_length_ms)
}

// bool flag_valid_word = 20;
inline void GnssSynchro::clear_flag_valid_word() {
  _impl_.flag_valid_word_ = false;
}
inline bool GnssSynchro::_internal_flag_valid_word() const {
  return _impl_.flag_valid_word_;
}
inline bool GnssSynchro::flag_valid_word() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.flag_valid_word)
  return _internal_flag_valid_word();
}
inline void GnssSynchro::_internal_set_flag_valid_word(bool value) {
  
  _impl_.flag_valid_word_ = value;
}
inline void GnssSynchro::set_flag_valid_word(bool value) {
  _internal_set_flag_valid_word(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.flag_valid_word)
}

// uint32 tow_at_current_symbol_ms = 21;
inline void GnssSynchro::clear_tow_at_current_symbol_ms() {
  _impl_.tow_at_current_symbol_ms_ = 0u;
}
inline uint32_t GnssSynchro::_internal_tow_at_current_symbol_ms() const {
  return _impl_.tow_at_current_symbol_ms_;
}
inline uint32_t GnssSynchro::tow_at_current_symbol_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.tow_at_current_symbol_ms)
  return _internal_tow_at_current_symbol_ms();
}
inline void GnssSynchro::_internal_set_tow_at_current_symbol_ms(uint32_t value) {
  
  _impl_.tow_at_current_symbol_ms_ = value;
}
inline void GnssSynchro::set_tow_at_current_symbol_ms(uint32_t value) {
  _internal_set_tow_at_current_symbol_ms(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.tow_at_current_symbol_ms)
}

// double pseudorange_m = 22;
inline void GnssSynchro::clear_pseudorange_m() {
  _impl_.pseudorange_m_ = 0;
}
inline double GnssSynchro::_internal_pseudorange_m() const {
  return _impl_.pseudorange_m_;
}
inline double GnssSynchro::pseudorange_m() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.pseudorange_m)
  return _internal_pseudorange_m();
}
inline void GnssSynchro::_internal_set_pseudorange_m(double value) {
  
  _impl_.pseudorange_m_ = value;
}
inline void GnssSynchro::set_pseudorange_m(double value) {
  _internal_set_pseudorange_m(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.pseudorange_m)
}

// double rx_time = 23;
inline void GnssSynchro::clear_rx_time() {
  _impl_.rx_time_ = 0;
}
inline double GnssSynchro::_internal_rx_time() const {
  return _impl_.rx_time_;
}
inline double GnssSynchro::rx_time() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.rx_time)
  return _internal_rx_time();
}
inline void GnssSynchro::_internal_set_rx_time(double value) {
  
  _impl_.rx_time_ = value;
}
inline void GnssSynchro::set_rx_time(double value) {
  _internal_set_rx_time(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.rx_time)
}

// bool flag_valid_pseudorange = 24;
inline void GnssSynchro::clear_flag_valid_pseudorange() {
  _impl_.flag_valid_pseudorange_ = false;
}
inline bool GnssSynchro::_internal_flag_valid_pseudorange() const {
  return _impl_.flag_valid_pseudorange_;
}
inline bool GnssSynchro::flag_valid_pseudorange() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.flag_valid_pseudorange)
  return _internal_flag_valid_pseudorange();
}
inline void GnssSynchro::_internal_set_flag_valid_pseudorange(bool value) {
  
  _impl_.flag_valid_pseudorange_ = value;
}
inline void GnssSynchro::set_flag_valid_pseudorange(bool value) {
  _internal_set_flag_valid_pseudorange(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.flag_valid_pseudorange)
}

// double interp_tow_ms = 25;
inline void GnssSynchro::clear_interp_tow_ms() {
  _impl_.interp_tow_ms_ = 0;
}
inline double GnssSynchro::_internal_interp_tow_ms() const {
  return _impl_.interp_tow_ms_;
}
inline double GnssSynchro::interp_tow_ms() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.interp_tow_ms)
  return _internal_interp_tow_ms();
}
inline void GnssSynchro::_internal_set_interp_tow_ms(double value) {
  
  _impl_.interp_tow_ms_ = value;
}
inline void GnssSynchro::set_interp_tow_ms(double value) {
  _internal_set_interp_tow_ms(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.interp_tow_ms)
}

// bool flag_PLL_180_deg_phase_locked = 26;
inline void GnssSynchro::clear_flag_pll_180_deg_phase_locked() {
  _impl_.flag_pll_180_deg_phase_locked_ = false;
}
inline bool GnssSynchro::_internal_flag_pll_180_deg_phase_locked() const {
  return _impl_.flag_pll_180_deg_phase_locked_;
}
inline bool GnssSynchro::flag_pll_180_deg_phase_locked() const {
  // @@protoc_insertion_point(field_get:gnss_sdr.GnssSynchro.flag_PLL_180_deg_phase_locked)
  return _internal_flag_pll_180_deg_phase_locked();
}
inline void GnssSynchro::_internal_set_flag_pll_180_deg_phase_locked(bool value) {
  
  _impl_.flag_pll_180_deg_phase_locked_ = value;
}
inline void GnssSynchro::set_flag_pll_180_deg_phase_locked(bool value) {
  _internal_set_flag_pll_180_deg_phase_locked(value);
  // @@protoc_insertion_point(field_set:gnss_sdr.GnssSynchro.flag_PLL_180_deg_phase_locked)
}

// -------------------------------------------------------------------

// Observables

// repeated .gnss_sdr.GnssSynchro observable = 1;
inline int Observables::_internal_observable_size() const {
  return _impl_.observable_.size();
}
inline int Observables::observable_size() const {
  return _internal_observable_size();
}
inline void Observables::clear_observable() {
  _impl_.observable_.Clear();
}
inline ::gnss_sdr::GnssSynchro* Observables::mutable_observable(int index) {
  // @@protoc_insertion_point(field_mutable:gnss_sdr.Observables.observable)
  return _impl_.observable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnss_sdr::GnssSynchro >*
Observables::mutable_observable() {
  // @@protoc_insertion_point(field_mutable_list:gnss_sdr.Observables.observable)
  return &_impl_.observable_;
}
inline const ::gnss_sdr::GnssSynchro& Observables::_internal_observable(int index) const {
  return _impl_.observable_.Get(index);
}
inline const ::gnss_sdr::GnssSynchro& Observables::observable(int index) const {
  // @@protoc_insertion_point(field_get:gnss_sdr.Observables.observable)
  return _internal_observable(index);
}
inline ::gnss_sdr::GnssSynchro* Observables::_internal_add_observable() {
  return _impl_.observable_.Add();
}
inline ::gnss_sdr::GnssSynchro* Observables::add_observable() {
  ::gnss_sdr::GnssSynchro* _add = _internal_add_observable();
  // @@protoc_insertion_point(field_add:gnss_sdr.Observables.observable)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnss_sdr::GnssSynchro >&
Observables::observable() const {
  // @@protoc_insertion_point(field_list:gnss_sdr.Observables.observable)
  return _impl_.observable_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_sdr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gnss_5fsynchro_2eproto
