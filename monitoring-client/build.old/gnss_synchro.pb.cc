// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_synchro.proto

#include "gnss_synchro.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gnss_sdr {
PROTOBUF_CONSTEXPR GnssSynchro::GnssSynchro(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.system_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prn_)*/0u
  , /*decltype(_impl_.channel_id_)*/0
  , /*decltype(_impl_.acq_delay_samples_)*/0
  , /*decltype(_impl_.acq_doppler_hz_)*/0
  , /*decltype(_impl_.acq_samplestamp_samples_)*/uint64_t{0u}
  , /*decltype(_impl_.fs_)*/int64_t{0}
  , /*decltype(_impl_.prompt_i_)*/0
  , /*decltype(_impl_.prompt_q_)*/0
  , /*decltype(_impl_.cn0_db_hz_)*/0
  , /*decltype(_impl_.carrier_doppler_hz_)*/0
  , /*decltype(_impl_.carrier_phase_rads_)*/0
  , /*decltype(_impl_.acq_doppler_step_)*/0u
  , /*decltype(_impl_.flag_valid_acquisition_)*/false
  , /*decltype(_impl_.flag_valid_symbol_output_)*/false
  , /*decltype(_impl_.flag_valid_word_)*/false
  , /*decltype(_impl_.flag_valid_pseudorange_)*/false
  , /*decltype(_impl_.code_phase_samples_)*/0
  , /*decltype(_impl_.tracking_sample_counter_)*/uint64_t{0u}
  , /*decltype(_impl_.correlation_length_ms_)*/0
  , /*decltype(_impl_.tow_at_current_symbol_ms_)*/0u
  , /*decltype(_impl_.pseudorange_m_)*/0
  , /*decltype(_impl_.rx_time_)*/0
  , /*decltype(_impl_.interp_tow_ms_)*/0
  , /*decltype(_impl_.flag_pll_180_deg_phase_locked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GnssSynchroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssSynchroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssSynchroDefaultTypeInternal() {}
  union {
    GnssSynchro _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssSynchroDefaultTypeInternal _GnssSynchro_default_instance_;
PROTOBUF_CONSTEXPR Observables::Observables(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.observable_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObservablesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservablesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservablesDefaultTypeInternal() {}
  union {
    Observables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservablesDefaultTypeInternal _Observables_default_instance_;
}  // namespace gnss_sdr
static ::_pb::Metadata file_level_metadata_gnss_5fsynchro_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gnss_5fsynchro_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gnss_5fsynchro_2eproto = nullptr;

const uint32_t TableStruct_gnss_5fsynchro_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.prn_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.acq_delay_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.acq_doppler_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.acq_samplestamp_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.acq_doppler_step_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.flag_valid_acquisition_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.fs_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.prompt_i_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.prompt_q_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.cn0_db_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.carrier_doppler_hz_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.carrier_phase_rads_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.code_phase_samples_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.tracking_sample_counter_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.flag_valid_symbol_output_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.correlation_length_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.flag_valid_word_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.tow_at_current_symbol_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.pseudorange_m_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.rx_time_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.flag_valid_pseudorange_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.interp_tow_ms_),
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _impl_.flag_pll_180_deg_phase_locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::Observables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnss_sdr::Observables, _impl_.observable_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gnss_sdr::GnssSynchro)},
  { 32, -1, -1, sizeof(::gnss_sdr::Observables)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gnss_sdr::_GnssSynchro_default_instance_._instance,
  &::gnss_sdr::_Observables_default_instance_._instance,
};

const char descriptor_table_protodef_gnss_5fsynchro_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022gnss_synchro.proto\022\010gnss_sdr\"\226\005\n\013GnssS"
  "ynchro\022\016\n\006system\030\001 \001(\t\022\016\n\006signal\030\002 \001(\t\022\013"
  "\n\003prn\030\003 \001(\r\022\022\n\nchannel_id\030\004 \001(\005\022\031\n\021acq_d"
  "elay_samples\030\005 \001(\001\022\026\n\016acq_doppler_hz\030\006 \001"
  "(\001\022\037\n\027acq_samplestamp_samples\030\007 \001(\004\022\030\n\020a"
  "cq_doppler_step\030\010 \001(\r\022\036\n\026flag_valid_acqu"
  "isition\030\t \001(\010\022\n\n\002fs\030\n \001(\003\022\020\n\010prompt_i\030\013 "
  "\001(\001\022\020\n\010prompt_q\030\014 \001(\001\022\021\n\tcn0_db_hz\030\r \001(\001"
  "\022\032\n\022carrier_doppler_hz\030\016 \001(\001\022\032\n\022carrier_"
  "phase_rads\030\017 \001(\001\022\032\n\022code_phase_samples\030\020"
  " \001(\001\022\037\n\027tracking_sample_counter\030\021 \001(\004\022 \n"
  "\030flag_valid_symbol_output\030\022 \001(\010\022\035\n\025corre"
  "lation_length_ms\030\023 \001(\005\022\027\n\017flag_valid_wor"
  "d\030\024 \001(\010\022 \n\030tow_at_current_symbol_ms\030\025 \001("
  "\r\022\025\n\rpseudorange_m\030\026 \001(\001\022\017\n\007rx_time\030\027 \001("
  "\001\022\036\n\026flag_valid_pseudorange\030\030 \001(\010\022\025\n\rint"
  "erp_tow_ms\030\031 \001(\001\022%\n\035flag_PLL_180_deg_pha"
  "se_locked\030\032 \001(\010\"8\n\013Observables\022)\n\nobserv"
  "able\030\001 \003(\0132\025.gnss_sdr.GnssSynchrob\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_gnss_5fsynchro_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gnss_5fsynchro_2eproto = {
    false, false, 761, descriptor_table_protodef_gnss_5fsynchro_2eproto,
    "gnss_synchro.proto",
    &descriptor_table_gnss_5fsynchro_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_gnss_5fsynchro_2eproto::offsets,
    file_level_metadata_gnss_5fsynchro_2eproto, file_level_enum_descriptors_gnss_5fsynchro_2eproto,
    file_level_service_descriptors_gnss_5fsynchro_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gnss_5fsynchro_2eproto_getter() {
  return &descriptor_table_gnss_5fsynchro_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gnss_5fsynchro_2eproto(&descriptor_table_gnss_5fsynchro_2eproto);
namespace gnss_sdr {

// ===================================================================

class GnssSynchro::_Internal {
 public:
};

GnssSynchro::GnssSynchro(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.GnssSynchro)
}
GnssSynchro::GnssSynchro(const GnssSynchro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GnssSynchro* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.system_){}
    , decltype(_impl_.signal_){}
    , decltype(_impl_.prn_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.acq_delay_samples_){}
    , decltype(_impl_.acq_doppler_hz_){}
    , decltype(_impl_.acq_samplestamp_samples_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.prompt_i_){}
    , decltype(_impl_.prompt_q_){}
    , decltype(_impl_.cn0_db_hz_){}
    , decltype(_impl_.carrier_doppler_hz_){}
    , decltype(_impl_.carrier_phase_rads_){}
    , decltype(_impl_.acq_doppler_step_){}
    , decltype(_impl_.flag_valid_acquisition_){}
    , decltype(_impl_.flag_valid_symbol_output_){}
    , decltype(_impl_.flag_valid_word_){}
    , decltype(_impl_.flag_valid_pseudorange_){}
    , decltype(_impl_.code_phase_samples_){}
    , decltype(_impl_.tracking_sample_counter_){}
    , decltype(_impl_.correlation_length_ms_){}
    , decltype(_impl_.tow_at_current_symbol_ms_){}
    , decltype(_impl_.pseudorange_m_){}
    , decltype(_impl_.rx_time_){}
    , decltype(_impl_.interp_tow_ms_){}
    , decltype(_impl_.flag_pll_180_deg_phase_locked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system().empty()) {
    _this->_impl_.system_.Set(from._internal_system(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signal().empty()) {
    _this->_impl_.signal_.Set(from._internal_signal(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prn_, &from._impl_.prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_pll_180_deg_phase_locked_) -
    reinterpret_cast<char*>(&_impl_.prn_)) + sizeof(_impl_.flag_pll_180_deg_phase_locked_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.GnssSynchro)
}

inline void GnssSynchro::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.system_){}
    , decltype(_impl_.signal_){}
    , decltype(_impl_.prn_){0u}
    , decltype(_impl_.channel_id_){0}
    , decltype(_impl_.acq_delay_samples_){0}
    , decltype(_impl_.acq_doppler_hz_){0}
    , decltype(_impl_.acq_samplestamp_samples_){uint64_t{0u}}
    , decltype(_impl_.fs_){int64_t{0}}
    , decltype(_impl_.prompt_i_){0}
    , decltype(_impl_.prompt_q_){0}
    , decltype(_impl_.cn0_db_hz_){0}
    , decltype(_impl_.carrier_doppler_hz_){0}
    , decltype(_impl_.carrier_phase_rads_){0}
    , decltype(_impl_.acq_doppler_step_){0u}
    , decltype(_impl_.flag_valid_acquisition_){false}
    , decltype(_impl_.flag_valid_symbol_output_){false}
    , decltype(_impl_.flag_valid_word_){false}
    , decltype(_impl_.flag_valid_pseudorange_){false}
    , decltype(_impl_.code_phase_samples_){0}
    , decltype(_impl_.tracking_sample_counter_){uint64_t{0u}}
    , decltype(_impl_.correlation_length_ms_){0}
    , decltype(_impl_.tow_at_current_symbol_ms_){0u}
    , decltype(_impl_.pseudorange_m_){0}
    , decltype(_impl_.rx_time_){0}
    , decltype(_impl_.interp_tow_ms_){0}
    , decltype(_impl_.flag_pll_180_deg_phase_locked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GnssSynchro::~GnssSynchro() {
  // @@protoc_insertion_point(destructor:gnss_sdr.GnssSynchro)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssSynchro::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.system_.Destroy();
  _impl_.signal_.Destroy();
}

void GnssSynchro::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssSynchro::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.GnssSynchro)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_.ClearToEmpty();
  _impl_.signal_.ClearToEmpty();
  ::memset(&_impl_.prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_pll_180_deg_phase_locked_) -
      reinterpret_cast<char*>(&_impl_.prn_)) + sizeof(_impl_.flag_pll_180_deg_phase_locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssSynchro::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_system();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gnss_sdr.GnssSynchro.system"));
        } else
          goto handle_unusual;
        continue;
      // string signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gnss_sdr.GnssSynchro.signal"));
        } else
          goto handle_unusual;
        continue;
      // uint32 prn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double acq_delay_samples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.acq_delay_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acq_doppler_hz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.acq_doppler_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 acq_samplestamp_samples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.acq_samplestamp_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 acq_doppler_step = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.acq_doppler_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_valid_acquisition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.flag_valid_acquisition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.fs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double prompt_i = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.prompt_i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double prompt_q = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.prompt_q_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cn0_db_hz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.cn0_db_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double carrier_doppler_hz = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.carrier_doppler_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double carrier_phase_rads = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.carrier_phase_rads_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double code_phase_samples = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.code_phase_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 tracking_sample_counter = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.tracking_sample_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_valid_symbol_output = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.flag_valid_symbol_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 correlation_length_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.correlation_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_valid_word = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.flag_valid_word_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tow_at_current_symbol_ms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.tow_at_current_symbol_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double pseudorange_m = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.pseudorange_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.rx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool flag_valid_pseudorange = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.flag_valid_pseudorange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double interp_tow_ms = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.interp_tow_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool flag_PLL_180_deg_phase_locked = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.flag_pll_180_deg_phase_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssSynchro::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.GnssSynchro)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (!this->_internal_system().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string signal = 2;
  if (!this->_internal_signal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.signal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signal(), target);
  }

  // uint32 prn = 3;
  if (this->_internal_prn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prn(), target);
  }

  // int32 channel_id = 4;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel_id(), target);
  }

  // double acq_delay_samples = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_delay_samples = this->_internal_acq_delay_samples();
  uint64_t raw_acq_delay_samples;
  memcpy(&raw_acq_delay_samples, &tmp_acq_delay_samples, sizeof(tmp_acq_delay_samples));
  if (raw_acq_delay_samples != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_acq_delay_samples(), target);
  }

  // double acq_doppler_hz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_doppler_hz = this->_internal_acq_doppler_hz();
  uint64_t raw_acq_doppler_hz;
  memcpy(&raw_acq_doppler_hz, &tmp_acq_doppler_hz, sizeof(tmp_acq_doppler_hz));
  if (raw_acq_doppler_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_acq_doppler_hz(), target);
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->_internal_acq_samplestamp_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_acq_samplestamp_samples(), target);
  }

  // uint32 acq_doppler_step = 8;
  if (this->_internal_acq_doppler_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_acq_doppler_step(), target);
  }

  // bool flag_valid_acquisition = 9;
  if (this->_internal_flag_valid_acquisition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_flag_valid_acquisition(), target);
  }

  // int64 fs = 10;
  if (this->_internal_fs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_fs(), target);
  }

  // double prompt_i = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_i = this->_internal_prompt_i();
  uint64_t raw_prompt_i;
  memcpy(&raw_prompt_i, &tmp_prompt_i, sizeof(tmp_prompt_i));
  if (raw_prompt_i != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_prompt_i(), target);
  }

  // double prompt_q = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_q = this->_internal_prompt_q();
  uint64_t raw_prompt_q;
  memcpy(&raw_prompt_q, &tmp_prompt_q, sizeof(tmp_prompt_q));
  if (raw_prompt_q != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_prompt_q(), target);
  }

  // double cn0_db_hz = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cn0_db_hz = this->_internal_cn0_db_hz();
  uint64_t raw_cn0_db_hz;
  memcpy(&raw_cn0_db_hz, &tmp_cn0_db_hz, sizeof(tmp_cn0_db_hz));
  if (raw_cn0_db_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_cn0_db_hz(), target);
  }

  // double carrier_doppler_hz = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_doppler_hz = this->_internal_carrier_doppler_hz();
  uint64_t raw_carrier_doppler_hz;
  memcpy(&raw_carrier_doppler_hz, &tmp_carrier_doppler_hz, sizeof(tmp_carrier_doppler_hz));
  if (raw_carrier_doppler_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_carrier_doppler_hz(), target);
  }

  // double carrier_phase_rads = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_phase_rads = this->_internal_carrier_phase_rads();
  uint64_t raw_carrier_phase_rads;
  memcpy(&raw_carrier_phase_rads, &tmp_carrier_phase_rads, sizeof(tmp_carrier_phase_rads));
  if (raw_carrier_phase_rads != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_carrier_phase_rads(), target);
  }

  // double code_phase_samples = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_code_phase_samples = this->_internal_code_phase_samples();
  uint64_t raw_code_phase_samples;
  memcpy(&raw_code_phase_samples, &tmp_code_phase_samples, sizeof(tmp_code_phase_samples));
  if (raw_code_phase_samples != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_code_phase_samples(), target);
  }

  // uint64 tracking_sample_counter = 17;
  if (this->_internal_tracking_sample_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_tracking_sample_counter(), target);
  }

  // bool flag_valid_symbol_output = 18;
  if (this->_internal_flag_valid_symbol_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_flag_valid_symbol_output(), target);
  }

  // int32 correlation_length_ms = 19;
  if (this->_internal_correlation_length_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_correlation_length_ms(), target);
  }

  // bool flag_valid_word = 20;
  if (this->_internal_flag_valid_word() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_flag_valid_word(), target);
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->_internal_tow_at_current_symbol_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_tow_at_current_symbol_ms(), target);
  }

  // double pseudorange_m = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pseudorange_m = this->_internal_pseudorange_m();
  uint64_t raw_pseudorange_m;
  memcpy(&raw_pseudorange_m, &tmp_pseudorange_m, sizeof(tmp_pseudorange_m));
  if (raw_pseudorange_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_pseudorange_m(), target);
  }

  // double rx_time = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx_time = this->_internal_rx_time();
  uint64_t raw_rx_time;
  memcpy(&raw_rx_time, &tmp_rx_time, sizeof(tmp_rx_time));
  if (raw_rx_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_rx_time(), target);
  }

  // bool flag_valid_pseudorange = 24;
  if (this->_internal_flag_valid_pseudorange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_flag_valid_pseudorange(), target);
  }

  // double interp_tow_ms = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_interp_tow_ms = this->_internal_interp_tow_ms();
  uint64_t raw_interp_tow_ms;
  memcpy(&raw_interp_tow_ms, &tmp_interp_tow_ms, sizeof(tmp_interp_tow_ms));
  if (raw_interp_tow_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_interp_tow_ms(), target);
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->_internal_flag_pll_180_deg_phase_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_flag_pll_180_deg_phase_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.GnssSynchro)
  return target;
}

size_t GnssSynchro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.GnssSynchro)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (!this->_internal_system().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string signal = 2;
  if (!this->_internal_signal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // uint32 prn = 3;
  if (this->_internal_prn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prn());
  }

  // int32 channel_id = 4;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel_id());
  }

  // double acq_delay_samples = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_delay_samples = this->_internal_acq_delay_samples();
  uint64_t raw_acq_delay_samples;
  memcpy(&raw_acq_delay_samples, &tmp_acq_delay_samples, sizeof(tmp_acq_delay_samples));
  if (raw_acq_delay_samples != 0) {
    total_size += 1 + 8;
  }

  // double acq_doppler_hz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_doppler_hz = this->_internal_acq_doppler_hz();
  uint64_t raw_acq_doppler_hz;
  memcpy(&raw_acq_doppler_hz, &tmp_acq_doppler_hz, sizeof(tmp_acq_doppler_hz));
  if (raw_acq_doppler_hz != 0) {
    total_size += 1 + 8;
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->_internal_acq_samplestamp_samples() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_acq_samplestamp_samples());
  }

  // int64 fs = 10;
  if (this->_internal_fs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fs());
  }

  // double prompt_i = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_i = this->_internal_prompt_i();
  uint64_t raw_prompt_i;
  memcpy(&raw_prompt_i, &tmp_prompt_i, sizeof(tmp_prompt_i));
  if (raw_prompt_i != 0) {
    total_size += 1 + 8;
  }

  // double prompt_q = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_q = this->_internal_prompt_q();
  uint64_t raw_prompt_q;
  memcpy(&raw_prompt_q, &tmp_prompt_q, sizeof(tmp_prompt_q));
  if (raw_prompt_q != 0) {
    total_size += 1 + 8;
  }

  // double cn0_db_hz = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cn0_db_hz = this->_internal_cn0_db_hz();
  uint64_t raw_cn0_db_hz;
  memcpy(&raw_cn0_db_hz, &tmp_cn0_db_hz, sizeof(tmp_cn0_db_hz));
  if (raw_cn0_db_hz != 0) {
    total_size += 1 + 8;
  }

  // double carrier_doppler_hz = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_doppler_hz = this->_internal_carrier_doppler_hz();
  uint64_t raw_carrier_doppler_hz;
  memcpy(&raw_carrier_doppler_hz, &tmp_carrier_doppler_hz, sizeof(tmp_carrier_doppler_hz));
  if (raw_carrier_doppler_hz != 0) {
    total_size += 1 + 8;
  }

  // double carrier_phase_rads = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_phase_rads = this->_internal_carrier_phase_rads();
  uint64_t raw_carrier_phase_rads;
  memcpy(&raw_carrier_phase_rads, &tmp_carrier_phase_rads, sizeof(tmp_carrier_phase_rads));
  if (raw_carrier_phase_rads != 0) {
    total_size += 1 + 8;
  }

  // uint32 acq_doppler_step = 8;
  if (this->_internal_acq_doppler_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_acq_doppler_step());
  }

  // bool flag_valid_acquisition = 9;
  if (this->_internal_flag_valid_acquisition() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_valid_symbol_output = 18;
  if (this->_internal_flag_valid_symbol_output() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_word = 20;
  if (this->_internal_flag_valid_word() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_pseudorange = 24;
  if (this->_internal_flag_valid_pseudorange() != 0) {
    total_size += 2 + 1;
  }

  // double code_phase_samples = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_code_phase_samples = this->_internal_code_phase_samples();
  uint64_t raw_code_phase_samples;
  memcpy(&raw_code_phase_samples, &tmp_code_phase_samples, sizeof(tmp_code_phase_samples));
  if (raw_code_phase_samples != 0) {
    total_size += 2 + 8;
  }

  // uint64 tracking_sample_counter = 17;
  if (this->_internal_tracking_sample_counter() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tracking_sample_counter());
  }

  // int32 correlation_length_ms = 19;
  if (this->_internal_correlation_length_ms() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_correlation_length_ms());
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->_internal_tow_at_current_symbol_ms() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tow_at_current_symbol_ms());
  }

  // double pseudorange_m = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pseudorange_m = this->_internal_pseudorange_m();
  uint64_t raw_pseudorange_m;
  memcpy(&raw_pseudorange_m, &tmp_pseudorange_m, sizeof(tmp_pseudorange_m));
  if (raw_pseudorange_m != 0) {
    total_size += 2 + 8;
  }

  // double rx_time = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx_time = this->_internal_rx_time();
  uint64_t raw_rx_time;
  memcpy(&raw_rx_time, &tmp_rx_time, sizeof(tmp_rx_time));
  if (raw_rx_time != 0) {
    total_size += 2 + 8;
  }

  // double interp_tow_ms = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_interp_tow_ms = this->_internal_interp_tow_ms();
  uint64_t raw_interp_tow_ms;
  memcpy(&raw_interp_tow_ms, &tmp_interp_tow_ms, sizeof(tmp_interp_tow_ms));
  if (raw_interp_tow_ms != 0) {
    total_size += 2 + 8;
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->_internal_flag_pll_180_deg_phase_locked() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssSynchro::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GnssSynchro::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssSynchro::GetClassData() const { return &_class_data_; }


void GnssSynchro::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GnssSynchro*>(&to_msg);
  auto& from = static_cast<const GnssSynchro&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.GnssSynchro)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_system().empty()) {
    _this->_internal_set_system(from._internal_system());
  }
  if (!from._internal_signal().empty()) {
    _this->_internal_set_signal(from._internal_signal());
  }
  if (from._internal_prn() != 0) {
    _this->_internal_set_prn(from._internal_prn());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_delay_samples = from._internal_acq_delay_samples();
  uint64_t raw_acq_delay_samples;
  memcpy(&raw_acq_delay_samples, &tmp_acq_delay_samples, sizeof(tmp_acq_delay_samples));
  if (raw_acq_delay_samples != 0) {
    _this->_internal_set_acq_delay_samples(from._internal_acq_delay_samples());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acq_doppler_hz = from._internal_acq_doppler_hz();
  uint64_t raw_acq_doppler_hz;
  memcpy(&raw_acq_doppler_hz, &tmp_acq_doppler_hz, sizeof(tmp_acq_doppler_hz));
  if (raw_acq_doppler_hz != 0) {
    _this->_internal_set_acq_doppler_hz(from._internal_acq_doppler_hz());
  }
  if (from._internal_acq_samplestamp_samples() != 0) {
    _this->_internal_set_acq_samplestamp_samples(from._internal_acq_samplestamp_samples());
  }
  if (from._internal_fs() != 0) {
    _this->_internal_set_fs(from._internal_fs());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_i = from._internal_prompt_i();
  uint64_t raw_prompt_i;
  memcpy(&raw_prompt_i, &tmp_prompt_i, sizeof(tmp_prompt_i));
  if (raw_prompt_i != 0) {
    _this->_internal_set_prompt_i(from._internal_prompt_i());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prompt_q = from._internal_prompt_q();
  uint64_t raw_prompt_q;
  memcpy(&raw_prompt_q, &tmp_prompt_q, sizeof(tmp_prompt_q));
  if (raw_prompt_q != 0) {
    _this->_internal_set_prompt_q(from._internal_prompt_q());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cn0_db_hz = from._internal_cn0_db_hz();
  uint64_t raw_cn0_db_hz;
  memcpy(&raw_cn0_db_hz, &tmp_cn0_db_hz, sizeof(tmp_cn0_db_hz));
  if (raw_cn0_db_hz != 0) {
    _this->_internal_set_cn0_db_hz(from._internal_cn0_db_hz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_doppler_hz = from._internal_carrier_doppler_hz();
  uint64_t raw_carrier_doppler_hz;
  memcpy(&raw_carrier_doppler_hz, &tmp_carrier_doppler_hz, sizeof(tmp_carrier_doppler_hz));
  if (raw_carrier_doppler_hz != 0) {
    _this->_internal_set_carrier_doppler_hz(from._internal_carrier_doppler_hz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_carrier_phase_rads = from._internal_carrier_phase_rads();
  uint64_t raw_carrier_phase_rads;
  memcpy(&raw_carrier_phase_rads, &tmp_carrier_phase_rads, sizeof(tmp_carrier_phase_rads));
  if (raw_carrier_phase_rads != 0) {
    _this->_internal_set_carrier_phase_rads(from._internal_carrier_phase_rads());
  }
  if (from._internal_acq_doppler_step() != 0) {
    _this->_internal_set_acq_doppler_step(from._internal_acq_doppler_step());
  }
  if (from._internal_flag_valid_acquisition() != 0) {
    _this->_internal_set_flag_valid_acquisition(from._internal_flag_valid_acquisition());
  }
  if (from._internal_flag_valid_symbol_output() != 0) {
    _this->_internal_set_flag_valid_symbol_output(from._internal_flag_valid_symbol_output());
  }
  if (from._internal_flag_valid_word() != 0) {
    _this->_internal_set_flag_valid_word(from._internal_flag_valid_word());
  }
  if (from._internal_flag_valid_pseudorange() != 0) {
    _this->_internal_set_flag_valid_pseudorange(from._internal_flag_valid_pseudorange());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_code_phase_samples = from._internal_code_phase_samples();
  uint64_t raw_code_phase_samples;
  memcpy(&raw_code_phase_samples, &tmp_code_phase_samples, sizeof(tmp_code_phase_samples));
  if (raw_code_phase_samples != 0) {
    _this->_internal_set_code_phase_samples(from._internal_code_phase_samples());
  }
  if (from._internal_tracking_sample_counter() != 0) {
    _this->_internal_set_tracking_sample_counter(from._internal_tracking_sample_counter());
  }
  if (from._internal_correlation_length_ms() != 0) {
    _this->_internal_set_correlation_length_ms(from._internal_correlation_length_ms());
  }
  if (from._internal_tow_at_current_symbol_ms() != 0) {
    _this->_internal_set_tow_at_current_symbol_ms(from._internal_tow_at_current_symbol_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pseudorange_m = from._internal_pseudorange_m();
  uint64_t raw_pseudorange_m;
  memcpy(&raw_pseudorange_m, &tmp_pseudorange_m, sizeof(tmp_pseudorange_m));
  if (raw_pseudorange_m != 0) {
    _this->_internal_set_pseudorange_m(from._internal_pseudorange_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx_time = from._internal_rx_time();
  uint64_t raw_rx_time;
  memcpy(&raw_rx_time, &tmp_rx_time, sizeof(tmp_rx_time));
  if (raw_rx_time != 0) {
    _this->_internal_set_rx_time(from._internal_rx_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_interp_tow_ms = from._internal_interp_tow_ms();
  uint64_t raw_interp_tow_ms;
  memcpy(&raw_interp_tow_ms, &tmp_interp_tow_ms, sizeof(tmp_interp_tow_ms));
  if (raw_interp_tow_ms != 0) {
    _this->_internal_set_interp_tow_ms(from._internal_interp_tow_ms());
  }
  if (from._internal_flag_pll_180_deg_phase_locked() != 0) {
    _this->_internal_set_flag_pll_180_deg_phase_locked(from._internal_flag_pll_180_deg_phase_locked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssSynchro::CopyFrom(const GnssSynchro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.GnssSynchro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssSynchro::IsInitialized() const {
  return true;
}

void GnssSynchro::InternalSwap(GnssSynchro* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_, lhs_arena,
      &other->_impl_.system_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signal_, lhs_arena,
      &other->_impl_.signal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssSynchro, _impl_.flag_pll_180_deg_phase_locked_)
      + sizeof(GnssSynchro::_impl_.flag_pll_180_deg_phase_locked_)
      - PROTOBUF_FIELD_OFFSET(GnssSynchro, _impl_.prn_)>(
          reinterpret_cast<char*>(&_impl_.prn_),
          reinterpret_cast<char*>(&other->_impl_.prn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssSynchro::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gnss_5fsynchro_2eproto_getter, &descriptor_table_gnss_5fsynchro_2eproto_once,
      file_level_metadata_gnss_5fsynchro_2eproto[0]);
}

// ===================================================================

class Observables::_Internal {
 public:
};

Observables::Observables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gnss_sdr.Observables)
}
Observables::Observables(const Observables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Observables* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.observable_){from._impl_.observable_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.Observables)
}

inline void Observables::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.observable_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Observables::~Observables() {
  // @@protoc_insertion_point(destructor:gnss_sdr.Observables)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Observables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.observable_.~RepeatedPtrField();
}

void Observables::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Observables::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.Observables)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.observable_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Observables::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gnss_sdr.GnssSynchro observable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Observables::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.Observables)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_observable_size()); i < n; i++) {
    const auto& repfield = this->_internal_observable(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.Observables)
  return target;
}

size_t Observables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.Observables)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  total_size += 1UL * this->_internal_observable_size();
  for (const auto& msg : this->_impl_.observable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Observables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Observables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Observables::GetClassData() const { return &_class_data_; }


void Observables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Observables*>(&to_msg);
  auto& from = static_cast<const Observables&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.Observables)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.observable_.MergeFrom(from._impl_.observable_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Observables::CopyFrom(const Observables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.Observables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observables::IsInitialized() const {
  return true;
}

void Observables::InternalSwap(Observables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.observable_.InternalSwap(&other->_impl_.observable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Observables::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gnss_5fsynchro_2eproto_getter, &descriptor_table_gnss_5fsynchro_2eproto_once,
      file_level_metadata_gnss_5fsynchro_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnss_sdr::GnssSynchro*
Arena::CreateMaybeMessage< ::gnss_sdr::GnssSynchro >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::GnssSynchro >(arena);
}
template<> PROTOBUF_NOINLINE ::gnss_sdr::Observables*
Arena::CreateMaybeMessage< ::gnss_sdr::Observables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnss_sdr::Observables >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
